값 - 문자 & 숫자
숫자 - 정수 & 실수

기본형 (primitive type) - 실제 값을 저장 ( boolean, char, byte, short, int, long, float, double )
참조형 (reference type)  - 주소를 값으로 갖는다 (4byte 주소 저장)
ex) Date today = new Date(); // Data 객체를 생성해서, 그 주소를 today에 저장

기본형 -  boolean 1byte - false / true
               char 2byte  - '\u0000' ~ '\uffff' (0~2^16)
               byte 1byte - -128~127 (-2^7 ~ 2^7-1)
               short 2byte - -32768~32767 (-2^15 ~ 2^15-1)
               int 4byte - -2147483648~2147483647 (-2^31 ~ 2^31-1)
               long 8byte - -9223372036854775808~9223372036854775807 (-2^63 ~ 2^63-1)
               float 4byte - 1.4E-45~3.4E38 (1.4* 10^-45 ~ 3.4*10^38)
               double 8byte - 4.9E-324 ~ 1.8E308(4.9*10^-324 ~ 1.8*10^308)

               float와 double은 같은 크기라도 훨씬 큰 값을 표현할 수 있으나 오차가 존재할 수 있음
               정밀도 - 10진수 n자리 수를 오차없이 저장 한다는 뜻
               float 7 / double 15

상수 - 값을 저장할 수 있는 공간이지만 , 변경 불가능
final int MAX_SPEED = 100;
상수가 필요한 이유 -> 여러곳의 값을 한번에 수정할 때 상수를 이용한 코드는 상수값 초기화만 다른 값으로 해주면 됨.

리터럴 - 기존의 상수의 뜻 위에서 MAX_SPEED는 상수, 리터럴은 100
리터럴 타입
논리형 리터럴 true false
정수형 리터럴 123, 0b0101, 0xFF

리터럴 접미사
정수형 L -> 접미사가 있으면 Long형 없으면 int형
실수형 f, d -> float f, 안쓰면 기본은 double의 d

접두사
0b -> 2진수
0 -> 8진수
0x -> 16진수

타입의 불일치
저장범위가 넓은 타입에 좁은 타입의 값을 저장하는 것은 허용됨
ex ) int i = 'A'; // A의 유니코드인 65가 i에 저장

문자 리터럴 - 'A'
문자열 리터럴 - "STRING"

String 클래스는 더할때 어느 한쪽이 String 이면 나머지도 String으로 변환 후 더한다.







