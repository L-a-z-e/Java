java.lang 패키지들은  import문 없이 사용 가능

Object 클래스

protected  Object clone() - 객체 자신의 복사본 반환
clone() 을 사용하려면 먼저 복제할 클래스가 Cloneable 인터페이스를 구현해야하고, clone() 을 오버라이딩 하면서 접근 제어자를 protected 에서 public으로 변경해야
상속관계가 없는 다른 클래스에서 clone()을 호출 할 수 있다.

public boolean equals(Object obj) - 객체 자신과 객체 obj가 같은 객체인지
- 매개변수로 객체의 참조변수를 받아서 그 결과를 boolean값으로 알려줌

protected void finalize() - 객체가 소멸될 때 가비지 컬렉터에 의해 자동적으로 호출 (거의 사용안함)

public Class getClass() - 객체 자신의 클래스 정보를 담고있는 Class 인스턴스를 반환
- Class 객체는 클래스의 모든 정보를 담고 있으며, 클래스당 1개만 존재,
클래스 로더에 의해서 클래스파일이 메모리에 올라갈 때 자동으로 생성된다.
기존에 생성된 클래스 객체가 메모리에 존재하는지 확인하고 있으면 객체의 참조를 반환, 없으면 클래스 패스에 지정된 경로를 따라서 클래스 파일을 찾는다.
못찾으면 ClassNotFoundException 발생, 찾으면 해당 클래스 파일을 읽어서 Class 객체로 변환한다.
즉 클래스 파일을 읽어서 사용하기 편한 형태로 저장해 놓은 것이 클래스 객체

public int hashCode() - 객체 자신의 해시코드 반환
- 일밙적으로 해시코드가 같은 두 객체가 존재하는 것이 가능하지만 Object 클래스에 정의된 hashCode() 메서드는
객체의 주소값으로 해시코드를 만들어서 반환하기때문에 32bit JVM에서 서로다른 두 객체는 같은 해시코드를 가질 수 없고,
64bit JVM에서는 8byte 주소값으로 해시코드(4byte)를 만들기 때문에 해시코드가 중복될 수 있다.
String 클래스는 문자열의 내용이 같으면 동일한 hashCode 를 반환하도록 메서드가 오버라이딩 되어있기때문에 동일한 문자열이라면 동일한 해시코드값을 얻는다.
System.identityHashCode(Object obj) 는 객체의 주소값으로 해시코드를 생성하기 때문에 모든 객체에 대해 항상 다른 해시코드값을 반환할 것을 보장한다.

public String toString() - 객체 자신의 정보를 문자열로 반환
- Object 클래스에는 getClass().getName()+"@"+Integer.toHexString(hashCode()); 로 정의되어있다. 클래스이름 + 16진수 해시코드

public void notify() - 객체 자신을 사용하려 기다리는 쓰레드 하나를 깨운다.
public void notifyAll() - 객체 자신을 사용하려 기다리는 모든 쓰레드를 깨운다.
public void wait()
public void wait(long timeout)
public void wait(long timeout, int nanos) - 다른 쓰레드가 notify() , notifyAll()을 호출할 때까지 현재 쓰레드를 무한히, 지정된 시간동안 기다리게 한다.

공변반환타입 (covariant return type)
오버라이딩할 때 조상 메서드의 반환타입을 자손 클래스의 타입으로 변경을 허용하는 것
