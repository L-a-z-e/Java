인터페이스(interface) -추상클래스보다 추상화 정도가 높아서 일반메서드, 멤버변수는 가질 수 없다. 추상메서드 , 상수만 가질 수 있다.

interface 인터페이스명 {
    public static final [Type] 상수명 = 값;
    public abstract 메서드명 (매개변수);
}
- 모든 멤버변수는 public static final 이어야 하고이를 생략할 수 있다.
- static과 default 메서드를 제외한 모든 메서드는 public abstract 이어야하고, 생략할 수 있다.

인터페이스는 클래스와 달리 Object 클래스같은 조상클래스가 없다.
다중 상속 가능

인터페이스 구현
    class 클래스명 implements 인터페이스명
    인터페이스에 정의된 추상메서드 구현 -> 일부만 구현시에는 class 를 abstract 로 선언해야함

메서드 오버라이딩시 주의점은 인터페이스에서 public abstract 가 생략되어있기때문에
조상의 접근제어자보다 넓은 범위의 접근제어자를 사용해야하므로 구현시에도 접근제어자가 public이 되어야한다.

인터페이스를 이용한 다형성
인터페이스 타입의 참조변수 -> 인스턴스 참조가능, 인터페이스 타입으로 형변환 가능
인터페이스 타입의 매개변수 -> 해당 인터페이스를 구현한 클래스의 인스턴스를 매개변수로 사용
인터페이스 타입의 리턴 -> 해당 인터페이스를 구현한 클래스의 인스턴스를 반환

인터페이스 장점
- 개발시간 단축
- 표준화 가능
- 서로 관계없는 클래스들에 관계를 맺을 수 있음
- 독립적인 프로그래밍 가능

인터페이스
- 클래스의 User , Provider 가 있다.
- User 쪽은 메서드를 사용(호출) 하는 쪽은 Provider 쪽의 선언부만 알면 된다.

default method / static method

default 메서드 -> 인터페이스도 결국 수정이 필요하고 인터페이스에 추상메서드를 하나 추가한다는건
인터페이스를 상속받는 모든 클래스들이 새로 추가한 메서드를 구현해야하므로
이러한 변경을 하지 않기 위해 jdk1.8부터 도입됨

다만 여러 인터페이스의 디폴트 메서드간 충돌시 -> 인터페이스를 구현한 클래스에서 디폴트 메서드를 오버라이딩 해야함
디폴트 메서드와 조상클래스의 메서드가 충돌할 경우 조상 클래스의 메서드가 상속되고 디폴트 메서드는 무시된다.
